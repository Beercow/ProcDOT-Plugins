#!/bin/bash

function PCAPext {
PYTHON_ARG="$1" python - <<END
from easygui import *
import os
import hashlib
import shutil
import subprocess as sub
import sys
import re

def ext(header):
	if 'MZ' in header:
		return '.mz'
	else:
		return '.bin'

def extn():
	ending = (('.ez', '.aw', '.atom', '.atomcat', '.atomsvc', '.ccxml', '.cdmia', '.cdmic', '.cdmid', '.cdmio', '.cdmiq', '.cu', '.davmount', '.dssc', '.xdssc', '.ecma', '.emma', '.epub', '.exi', '.pfr', '.stk', '.ipfix', '.jar', '.ser', '.class', '.js', '.json', '.lostxml', '.hqx', '.cpt', '.mads', '.mrc', '.mrcx', '.mb', '.mathml', '.mbox', '.mscml', '.meta4', '.mets', '.mods', '.mp21', '.mp4s', '.doc', '.mxf', '.oda', '.opf', '.ogx', '.onetoc', '.xer', '.pdf', '.pgp', '.asc', '.prf', '.p10', '.p7m', '.p7s', '.p8', '.ac', '.cer', '.crl', '.pkipath', '.pki', '.pls', '.ps', '.cww', '.pskcxml', '.rdf', '.rif', '.rnc', '.rl', '.rld', '.rs', '.rsd', '.rss', '.rtf', '.sbml', '.scq', '.scs', '.spq', '.spp', '.sdp', '.setpay', '.setreg', '.shf', '.smil', '.rq', '.srx', '.gram', '.grxml', '.sru', '.ssml', '.teicorpus', '.tfi', '.tsd', '.plb', '.psb', '.pvb', '.tcap', '.pwn', '.aso', '.imp', '.acu', '.atc', '.air', '.fxp', '.xdp', '.xfdf', '.ahead', '.azf', '.azs', '.azw', '.acc', '.ami', '.apk', '.cii', '.fti', '.atx', '.mpkg', '.m3u8', '.swi', '.aep', '.mpm', '.bmi', '.rep', '.cdxml', '.mmd', '.cdy', '.cla', '.rp9', '.c4g', '.c11amc', '.c11amz', '.csp', '.cdbcmsg', '.cmc', '.clkx', '.clkk', '.clkp', '.clkt', '.clkw', '.wbs', '.pml', '.ppd', '.car', '.pcurl', '.rdz', '.fe_launch', '.dna', '.mlp', '.dpg', '.dfac', '.ait', '.svc', '.geo', '.mag', '.nml', '.esf', '.msf', '.qam', '.slt', '.ssf', '.es3', '.ez2', '.ez3', '.fdf', '.mseed', '.seed', '.gph', '.ftc', '.fm', '.fnc', '.ltf', '.fsc', '.oas', '.oa2', '.oa3', '.fg5', '.bh2', '.ddd', '.xdw', '.xbd', '.fzs', '.txd', '.ggb', '.ggt', '.gex', '.gxt', '.g2w', '.g3w', '.gmx', '.kml', '.kmz', '.gqf', '.gac', '.ghf', '.gim', '.grv', '.gtm', '.tpl', '.vcg', '.hal', '.zmm', '.hbci', '.les', '.hpgl', '.hpid', '.hps', '.jlt', '.pcl', '.pclxl', '.sfd-hdstx', '.x3d', '.mpy', '.afp', '.irm', '.sc', '.icc', '.igl', '.ivp', '.ivu', '.igm', '.xpw', '.i2g', '.qbo', '.qfx', '.rcprofile', '.irp', '.xpr', '.fcs', '.jam', '.rms', '.jisp', '.joda', '.ktz', '.karbon', '.chrt', '.kfo', '.flw', '.kon', '.kpr', '.ksp', '.kwd', '.htke', '.kia', '.knp', '.skp', '.sse', '.lasxml', '.lbd', '.lbe', '.123', '.apr', '.pre', '.nsf', '.org', '.scm', '.lwp', '.portpkg', '.mcd', '.mc1', '.cdkey', '.mwf', '.mfm', '.flo', '.igx', '.mif', '.daf', '.dis', '.mbk', '.mqy', '.msl', '.plc', '.txf', '.mpn', '.mpc', '.xul', '.cil', '.cab', '.xls', '.xlam', '.xlsb', '.xlsm', '.xltm', '.eot', '.chm', '.ims', '.lrm', '.thmx', '.cat', '.stl', '.ppt', '.ppam', '.pptm', '.sldm', '.ppsm', '.potm', '.mpp', '.docm', '.dotm', '.wps', '.wpl', '.xps', '.mseq', '.mus', '.msty', '.nlu', '.nnd', '.nns', '.nnw', '.ngdat', '.n-gage', '.rpst', '.rpss', '.edm', '.edx', '.ext', '.odc', '.otc', '.odb', '.odf', '.odft', '.odg', '.otg', '.odi', '.oti', '.odp', '.otp', '.ods', '.ots', '.odt', '.odm', '.ott', '.oth', '.xo', '.dd2', '.oxt', '.pptx', '.sldx', '.ppsx', '.potx', '.xlsx', '.xltx', '.docx', '.dotx', '.mgp', '.dp', '.pdb', '.paw', '.str', '.ei6', '.efif', '.wg', '.plf', '.pbd', '.box', '.mgz', '.qps', '.ptid', '.qxd', '.bed', '.mxl', '.musicxml', '.cryptonote', '.cod', '.rm', '.link66', '.st', '.see', '.sema', '.semd', '.semf', '.ifm', '.itp', '.iif', '.ipk', '.twd', '.mmf', '.teacher', '.sdkm', '.dxp', '.sfs', '.sdc', '.sda', '.sdd', '.smf', '.sdw', '.sgl', '.sm', '.sxc', '.stc', '.sxd', '.std', '.sxi', '.sti', '.sxm', '.sxw', '.sxg', '.stw', '.sus', '.svd', '.sis', '.xsm', '.bdm', '.xdm', '.tao', '.tmo', '.tpt', '.mxs', '.tra', '.ufdl', '.utz', '.umj', '.unityweb', '.uoml', '.vcx', '.vsd', '.vis', '.vsf', '.wbxml', '.wmlc', '.wmlsc', '.wtb', '.nbp', '.wpd', '.wqd', '.stf', '.xar', '.xfdl', '.hvd', '.hvs', '.hvp', '.osf', '.osfpvg', '.saf', '.spf', '.cmp', '.zir', '.zaz', '.vxml', '.wgt', '.hlp', '.wsdl', '.wspolicy', '.7z', '.abw', '.ace', '.aam', '.aas', '.bcpio', '.torrent', '.bz', '.bz2', '.vcd', '.chat', '.pgn', '.cpio', '.csh', '.deb', '.dir', '.wad', '.ncx', '.dtb', '.res', '.dvi', '.bdf', '.gsf', '.psf', '.otf', '.pcf', '.snf', '.ttf', '.afm', '.woff', '.spl', '.gnumeric', '.gtar', '.hdf', '.jnlp', '.latex', '.mobi', '.m3u8', '.application', '.wmd', '.wmz', '.xbap', '.mdb', '.obd', '.crd', '.clp', '.mvb', '.wmf', '.mny', '.pub', '.scd', '.trm', '.wri', '.nc', '.p12', '.p7b', '.p7r', '.rar', '.sh', '.shar', '.swf', '.xap', '.sit', '.sitx', '.sv4cpio', '.sv4crc', '.tar', '.tcl', '.tex', '.tfm', '.texi', '.ustar', '.src', '.crt', '.fig', '.xpi', '.xdf', '.xenc', '.xhtml', '.xml', '.dtd', '.xop', '.xslt', '.xspf', '.xvml', '.yang', '.yin', '.zip', '.adp', '.au', '.mid', '.mp4a', '.m4a', '.mpga', '.ogg', '.uvva', '.eol', '.dra', '.dts', '.dtshd', '.lvp', '.pya', '.ecelp4800', '.ecelp7470', '.ecelp9600', '.rip', '.weba', '.aac', '.aiff', '.m3u', '.wax', '.wma', '.ram', '.rmp', '.wav', '.cdx', '.cif', '.cmdf', '.cml', '.csml', '.xyz', '.bmp', '.cgm', '.g3', '.gif', '.ief', '.jp2', '.jpg', '.ktx', '.pict', '.png', '.btif', '.svg', '.tiff', '.psd', '.uvi', '.djvu', '.sub', '.dwg', '.dxf', '.fbs', '.fpx', '.fst', '.mmr', '.rlc', '.mdi', '.npx', '.wbmp', '.xif', '.webp', '.ras', '.cmx', '.fh', '.ico', '.pntg', '.pcx', '.pict', '.pnm', '.pbm', '.pgm', '.ppm', '.qtif', '.rgb', '.xbm', '.xpm', '.xwd', '.eml', '.iges', '.mesh', '.dae', '.dwf', '.gdl', '.gtw', '.mts', '.vtu', '.vrml', '.manifest', '.ics', '.css', '.csv', '.html', '.n3', '.txt', '.dsc', '.rtx', '.sgml', '.tsv', '.roff', '.ttl', '.urls', '.curl', '.dcurl', '.mcurl', '.scurl', '.fly', '.flx', '.gv', '.3dml', '.spot', '.jad', '.wml', '.wmls', '.asm', '.c', '.f', '.java', '.pas', '.etx', '.uu', '.vcs', '.vcf', '.3gp', '.3g2', '.h261', '.h263', '.h264', '.jpgv', '.jpm', '.mj2', '.ts', '.m4v', '.mpg', '.ogv', '.mov', '.uvvh', '.uvvm', '.uvvp', '.uvvs', '.uvvv', '.fvt', '.m4u', '.pyv', '.uvvu', '.viv', '.webm', '.dv', '.f4v', '.fli', '.flv', '.m4v', '.asf', '.wm', '.wmv', '.wmx', '.wvx', '.avi', '.movie', '.ice'))
	return ending

def parse_files(dire,path):
	for infile in os.listdir(dire):
		if 'HTTPBODY' in infile:
			if infile.endswith(extn()):	
				os.chdir(path)
				shutil.move((dire+infile),(infile))
			else:
				try:
					with open(dire+infile, 'rb') as temp_file:
						end = ext(temp_file.read(20))
						temp_file.close()
						os.chdir(path)
						shutil.move((dire+infile),(infile+end))
				except:
					pass
					
def MD5(path,reply):
	for infile in os.listdir(path):
		if reply == 'MD5':
			h = hashlib.md5()
		elif reply == 'SHA1':
			h = hashlib.sha1()
		elif reply == 'SHA256':
			h = hashlib.sha256()
		with open (infile, 'rb') as afile:
			buf = afile.read()
			h.update(buf)
			output = h.hexdigest()
			afile.close()
		filename, fileExtention = os.path.splitext(infile)
		shutil.move(infile,output+fileExtention)
		
def gui(reply,path):
	while 1:
		msg = 'Select hash type:'
		title = 'Extract files from pcap'
		choices = ['MD5','SHA1','SHA256']
		reply = buttonbox(msg,title,choices=choices)
		path = diropenbox(msg='Select output folder',title=title,default=os.getcwd())
		if reply and path != None:
			if not os.path.exists(path):
				os.makedirs(path)
				return reply,path
			else:
				return reply,path
		else:
			exit(0)

def error(id, message, fatal=0):
	# write out error
	message = "Error " + str(id) + ": " + message + "\r\n"
	sys.stderr.write(message)

	if fatal==1:
		# exit program if fatal
		sys.stderr.write("Exiting...")
		msgbox(message)
		exit(id)

def validate_tcpflow_version():
	minversion = "tcpflow 1.4.4 "
	versionmatch = "tcpflow\s+([0-9]+)\.([0-9]+)\.([0-9]+)\s";

	try:
		# Run tcpflow version check
		testcmd = sub.Popen(['tcpflow', '-V'], stdout=sub.PIPE, stderr=sub.PIPE)
		testcmd.wait()
		versionout, versionerr = testcmd.communicate()

		# Fail if command errors out
		if len(versionerr) > 0:
			error(501, "tcpflow >= {0} not found, Output:{1}".format(minversion, versionerr), 1)

		# determine minimum version
		minver = re.search(versionmatch, minversion, re.IGNORECASE)
		mv1 = int(minver.group(1))
		mv2 = int(minver.group(2))
		mv3 = int(minver.group(3))

		# determine current version
		findver = re.search(versionmatch, versionout, re.IGNORECASE)
		if findver == None or len(findver.groups()) != 3:
			v1 = v2 = v3 = 0
		else:
			v1 = int(findver.group(1))
			v2 = int(findver.group(2))
			v3 = int(findver.group(3))

		# compare current to minimum
		supported_version=0
		if v1==mv1:
			if v2==mv2:
				if v3>=mv3:
					supported_version=1
			elif v2>mv2:
				supported_version=1
		elif v1>mv1:
			supported_version=1

		# fail is unsupported
		if supported_version==0:
			if v1==0 and v2==0 and v3==0:
				error(502, 'tcpflow found, but version >= {0} required, Output:{1}'.format(minversion,versionout), 1)
			else:
				error(503, 'tcpflow {0}.{1}.{2} found, but version >= {3} required'.format(v1,v2,v3,minversion), 1)
	except SystemExit:
		raise
	except:
		# non-fatal fail if anything goes wrong during check
		error(500, 'Unable to test tcpflow version, version >= {0} required, Exception:{1}'.format(minversion, sys.exc_info()), 0)

def main():
	validate_tcpflow_version()
	PCAP = (os.environ['PROCDOTPLUGIN_WindumpFilePcap'])
	reply = None
	path = None
	reply,path = gui(reply,path)
	p = sub.Popen(['tcpflow', '-o', 'tcpflow_out', '-ar', (PCAP)], stdout=sub.PIPE, stderr=sub.PIPE)
	p.wait()
	dire = os.path.join(os.getcwd() + '/tcpflow_out/')
	parse_files(dire,path)
	MD5(path,reply)
	shutil.rmtree(dire)
if __name__ == '__main__':
	main()
END
}

export PROCDOTPLUGIN_WindumpFilePcap 
PCAPext
